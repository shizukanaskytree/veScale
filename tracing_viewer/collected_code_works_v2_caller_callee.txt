- README.md

# How to start?

```bash
root@f78e8e970a17:~/vescale_prj/veScale/tracing/code_review_web_app# python app.py

 * Serving Flask app 'app'
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:5000
Press CTRL+C to quit
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 104-502-987
127.0.0.1 - - [29/Aug/2024 10:03:07] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [29/Aug/2024 10:03:11] "GET /static/js/main.js HTTP/1.1" 304 -
127.0.0.1 - - [29/Aug/2024 10:03:11] "GET /static/js/resize.js HTTP/1.1" 304 -
127.0.0.1 - - [29/Aug/2024 10:03:11] "GET /static/css/styles.css HTTP/1.1" 200 -
127.0.0.1 - - [29/Aug/2024 10:03:12] "GET /get_call_stack HTTP/1.1" 200 -
```


# Font size of the tree view content

The font size of the tree view content is primarily controlled by the CSS `font-size` property applied to the elements within the tree view. Specifically, the following CSS rules control the font size:

1. **Treeview Container**:
   - The `.treeview` class defines the overall font size for the entire tree view. Setting the `font-size` here will apply to all text within the tree view unless overridden by more specific rules.

   ```css
   .treeview {
       font-size: 10px; /* Controls the general font size of the tree view content */
   }
   ```

2. **List Items (`li`)**:
   - The `li` elements represent individual nodes in the tree. If you set a `font-size` here, it will directly control the font size of each item in the tree.

   ```css
   li {
       font-size: 10px; /* Controls the font size of each list item in the tree */
   }
   ```

3. **Function Name Span**:
   - The `.function-name` class is used for the span that displays the function name. If this is set, it will specifically control the font size of the function names within each list item.

   ```css
   li .function-name {
       font-size: 10px; /* Controls the font size of function names */
   }
   ```

4. **Buttons**:
   - The `button.display-code` class controls the font size of the buttons within the tree view. Adjusting this will change the size of the text inside the buttons.

   ```css
   button.display-code {
       font-size: 10px; /* Controls the font size of the buttons */
   }
   ```

### Summary of Control Points:
- **Overall Tree View**: `.treeview { font-size: ...; }`
- **Individual Tree Items**: `li { font-size: ...; }`
- **Function Names**: `li .function-name { font-size: ...; }`
- **Buttons**: `button.display-code { font-size: ...; }`

By adjusting these CSS properties, you can precisely control the font size of different parts of the tree view content. If you want to reduce the overall font size, start with the `.treeview` class. If you need finer control, adjust the `li`, `.function-name`, and `button.display-code` classes as needed.
- app.py

from flask import Flask, render_template, jsonify, request
import os
import re

app = Flask(__name__)

def parse_log_file(file_path):
    with open(file_path, 'r') as f:
        logs = []
        for line in f:
            match_push = re.match(r'^(--+>|\s*>)\s*call function (.+?) in (.+?):(\d+)', line)
            if match_push:
                function_name = match_push.group(2)
                file_path = match_push.group(3)
                line_number = int(match_push.group(4))
                logs.append((function_name, file_path, line_number, "push"))
                continue

            match_pop = re.match(r'^(<--+|\s*<)\s*exit function (.+?) in (.+?):(\d+)', line)
            if match_pop:
                function_name = match_pop.group(2)
                file_path = match_pop.group(3)
                line_number = int(match_pop.group(4))
                logs.append((function_name, file_path, line_number, "pop"))
                continue

    return logs

class CallStackNode:
    def __init__(self, function_name, file_path, start_line_number):
        self.function_name = function_name
        self.file_path = file_path
        self.start_line_number = start_line_number
        self.end_line_number = None
        self.children = []
        self.parent = None

    def add_child(self, child_node):
        child_node.parent = self
        self.children.append(child_node)

    def set_end_line_number(self, end_line_number):
        self.end_line_number = end_line_number

class CallStackTree:
    def __init__(self):
        self.root = CallStackNode("root", "", 0)
        self.current_node = self.root

    def push(self, function_name, file_path, start_line_number):
        new_node = CallStackNode(function_name, file_path, start_line_number)
        self.current_node.add_child(new_node)
        self.current_node = new_node

    def pop(self, end_line_number):
        if self.current_node != self.root:
            self.current_node.set_end_line_number(end_line_number)
            self.current_node = self.current_node.parent

# Global call stack tree to be used in the Flask routes
call_stack_tree = CallStackTree()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get_call_stack', methods=['GET'])
def get_call_stack():
    global call_stack_tree
    def build_tree(node):
        children = [build_tree(child) for child in node.children]
        return {
            'function_name': node.function_name,
            'file_path': node.file_path,
            'start_line_number': node.start_line_number,
            'end_line_number': node.end_line_number,
            'children': children
        }
    return jsonify(build_tree(call_stack_tree.root))

@app.route('/get_function_code', methods=['GET'])
def get_function_code():
    file_path = request.args.get('file_path')
    start_line_number = int(request.args.get('start_line_number'))
    end_line_number = request.args.get('end_line_number')

    # If the end_line_number is missing or invalid, set a default value
    if not end_line_number or end_line_number == 'null':
        end_line_number = start_line_number + 20  # Arbitrary number of lines to display if end_line_number is missing
    else:
        end_line_number = int(end_line_number)

    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()

        displayed_lines = lines[start_line_number - 1:end_line_number]
        numbered_lines = [f"{i + start_line_number:4d}: {line}" for i, line in enumerate(displayed_lines)]

        return jsonify({
            'code': ''.join(numbered_lines)
        })
    except FileNotFoundError:
        return jsonify({
            'error': f"File not found: {file_path}"
        })

def load_log_file():
    log_file_path = os.path.join('logs', 'tracing-test_schedule-20240829_071457.log')
    logs = parse_log_file(log_file_path)

    global call_stack_tree
    for log in logs:
        function_name, file_path, line_number, operation = log
        if operation == "push":
            call_stack_tree.push(function_name, file_path, line_number)
        elif operation == "pop":
            call_stack_tree.pop(line_number)

if __name__ == '__main__':
    load_log_file()
    app.run(debug=True)
- styles.css

.container {
    display: flex;
    height: 100vh;
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    overflow: hidden;
}

.treeview {
    width: 50%;
    border-right: 1px solid #ccc;
    overflow-y: auto;
    padding: 10px;
    font-size: 10px;
}

.codeview {
    width: 50%;
    padding: 10px;
    overflow-y: hidden; /* Hide overflow to manage two separate code views */
    background-color: #f5f5f5;
    font-family: 'Courier New', Courier, monospace;
    border-left: 1px solid #ccc;
    font-size: 12px;
    display: flex;
    flex-direction: column;
}

#code-view-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.code-display {
    overflow-y: auto;
    padding: 10px;
    flex-grow: 1;
    white-space: pre-wrap;
    background-color: #fff;
}

.horizontal-divider {
    height: 5px;
    background-color: #ccc;
    cursor: row-resize;
}

.divider {
    width: 5px;
    background-color: #ccc;
    cursor: col-resize;
    position: relative;
}

ul {
    list-style-type: none;
    padding-left: 10px;
}

li {
    display: block;
    margin: 3px 0;
    padding: 2px;
    border-left: 2px solid #007bff;
    font-family: monospace;
    font-size: 10px;
}

li .function-name {
    display: inline-block;
    margin-right: 8px;
    font-weight: bold;
    font-size: 10px;
}

button.display-code {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 2px 5px;
    cursor: pointer;
    border-radius: 3px;
    margin-left: 5px;
    font-size: 10px;
}

button.display-code:hover {
    background-color: #0056b3;
}

.treeview ul ul {
    margin-left: 10px;
}

/* Optional: Styles for Prism.js syntax highlighting */
pre.line-numbers {
    position: relative;
    padding-left: 3.8em;
    counter-reset: linenumber;
}

.line-numbers-rows {
    position: absolute;
    pointer-events: none;
    top: 0;
    font-size: 100%;
    left: 0;
    width: 3em;
    user-select: none;
    text-align: right;
    padding-right: 0.6em;
    padding-top: 0.4em;
    font-size: 14px;
}

code[class*="language-"], pre[class*="language-"] {
    color: #393A34;
    background: none;
    text-shadow: 0 1px white;
    font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
    direction: ltr;
    text-align: left;
    word-spacing: normal;
    word-break: normal;
    line-height: 1.5;
    tab-size: 4;
    hyphens: none;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
    color: slategray;
}

.token.punctuation {
    color: #999;
}

.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
    color: #905;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
    color: #690;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
    color: #a67f59;
    background: hsla(0, 0%, 100%, 0.5);
}

.token.atrule,
.token.attr-value,
.token.keyword {
    color: #07a;
}

.token.function,
.token.class-name {
    color: #DD4A68;
}

.token.regex,
.token.important,
.token.variable {
    color: #e90;
}

.token.important,
.token.bold {
    font-weight: bold;
}

.token.italic {
    font-style: italic;
}

.token.entity {
    cursor: help;
}
- main.js

document.addEventListener('DOMContentLoaded', function () {
    fetch('/get_call_stack')
        .then(response => response.json())
        .then(data => {
            const rootElement = document.getElementById('call-stack-root');
            buildTree(rootElement, data);
        });

    function buildTree(parentElement, nodeData) {
        const li = document.createElement('li');

        const functionNameSpan = document.createElement('span');
        functionNameSpan.textContent = `${nodeData.function_name} (${nodeData.file_path}:${nodeData.start_line_number}-${nodeData.end_line_number || '...'})`;
        functionNameSpan.classList.add('function-name');
        li.appendChild(functionNameSpan);

        li.dataset.filePath = nodeData.file_path;
        li.dataset.startLineNumber = nodeData.start_line_number;
        li.dataset.endLineNumber = nodeData.end_line_number;
        li.title = `${nodeData.function_name} in ${nodeData.file_path}:${nodeData.start_line_number}-${nodeData.end_line_number || '...'}`;

        // Initialize counter
        let clickCount = 1;

        const displayCodeButton = document.createElement('button');
        displayCodeButton.textContent = '🐣';
        displayCodeButton.classList.add('display-code');
        displayCodeButton.addEventListener('click', function (event) {
            event.stopPropagation();

            // Replace the emoji with the counter and increment it on each click
            displayCodeButton.textContent = clickCount;
            clickCount += 1;

            // Fetch the code snippets for the current function and its parent
            const codeDisplayUpper = document.getElementById('code-display-upper');
            const codeDisplayLower = document.getElementById('code-display-lower');

            // Clear previous code but retain the structure
            codeDisplayUpper.innerHTML = '<p>Loading parent function...</p>';
            codeDisplayLower.innerHTML = '<p>Loading current function...</p>';

            // Fetch lower part (current function)
            fetch(`/get_function_code?file_path=${encodeURIComponent(li.dataset.filePath)}&start_line_number=${li.dataset.startLineNumber}&end_line_number=${li.dataset.endLineNumber}`)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        codeDisplayLower.textContent = data.error;
                    } else {
                        const preElementLower = document.createElement('pre');
                        preElementLower.classList.add('line-numbers');
                        const codeElementLower = document.createElement('code');
                        codeElementLower.classList.add('language-python');
                        codeElementLower.textContent = data.code;
                        preElementLower.appendChild(codeElementLower);
                        codeDisplayLower.innerHTML = ''; // Clear loading message
                        codeDisplayLower.appendChild(preElementLower);
                        Prism.highlightElement(codeElementLower);
                    }
                });

            // Fetch upper part (parent function)
            if (nodeData.parent) {
                fetch(`/get_function_code?file_path=${encodeURIComponent(nodeData.parent.file_path)}&start_line_number=${nodeData.parent.start_line_number}&end_line_number=${nodeData.parent.end_line_number}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            codeDisplayUpper.textContent = data.error;
                        } else {
                            const preElementUpper = document.createElement('pre');
                            preElementUpper.classList.add('line-numbers');
                            const codeElementUpper = document.createElement('code');
                            codeElementUpper.classList.add('language-python');
                            codeElementUpper.textContent = data.code;
                            preElementUpper.appendChild(codeElementUpper);
                            codeDisplayUpper.innerHTML = ''; // Clear loading message
                            codeDisplayUpper.appendChild(preElementUpper);
                            Prism.highlightElement(codeElementUpper);
                        }
                    });
            } else {
                codeDisplayUpper.innerHTML = '<p>No parent function available.</p>';
            }
        });

        li.appendChild(displayCodeButton);

        // Add a border or indentation for clarity
        li.style.marginLeft = '20px';

        if (nodeData.children.length > 0) {
            const ul = document.createElement('ul');
            nodeData.children.forEach(child => {
                child.parent = nodeData; // Set the parent reference
                buildTree(ul, child);
            });
            li.appendChild(ul);
        }

        parentElement.appendChild(li);
    }
});
- resize.js

document.addEventListener('DOMContentLoaded', function () {
    const horizontalDivider = document.getElementById('dragMeHorizontal');
    const upperPanel = horizontalDivider.previousElementSibling;
    const lowerPanel = horizontalDivider.nextElementSibling;

    let isDraggingHorizontal = false;

    horizontalDivider.addEventListener('mousedown', function (e) {
        isDraggingHorizontal = true;
    });

    document.addEventListener('mousemove', function (e) {
        if (!isDraggingHorizontal) return;

        const containerRect = upperPanel.parentElement.getBoundingClientRect();
        const upperPanelHeight = e.clientY - containerRect.top;
        const lowerPanelHeight = containerRect.bottom - e.clientY;

        upperPanel.style.height = `${upperPanelHeight}px`;
        lowerPanel.style.height = `${lowerPanelHeight}px`;
    });

    document.addEventListener('mouseup', function () {
        isDraggingHorizontal = false;
    });
});
- index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code Review App</title>

    <!-- Prism.js for syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script> <!-- Include Python language support -->

    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="container">
        <div class="treeview">
            <h3>Call Stack</h3>
            <ul id="call-stack-root"></ul>
        </div>
        <div class="divider" id="dragMe"></div>
        <div class="codeview">
            <h3>Code Snippet</h3>
            <div id="code-view-container">
                <div id="code-display-upper" class="code-display"></div>
                <div id="dragMeHorizontal" class="horizontal-divider"></div>
                <div id="code-display-lower" class="code-display"></div>
            </div>
        </div>
    </div>

    <!-- Custom JavaScript -->
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    <script src="{{ url_for('static', filename='js/resize.js') }}"></script>
</body>
</html>
